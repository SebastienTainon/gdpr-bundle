<?xml version="1.0"?>
<ruleset name="SuperBrave">
    <description>SuperBrave Code Standards.</description>
    <autoload>vendor/autoload.php</autoload>
    <file>.</file>

    <!-- Show sniff names and show progress -->
    <arg value="sp"/>
    <!-- Exclude the vendor and bin folders, we can't be responsible for 3rd party and generated code -->
    <exclude-pattern>*/vendor/*</exclude-pattern>
    <exclude-pattern>bin/*</exclude-pattern>
    <!-- Only validate files with the php extension -->
    <arg name="extensions" value="php"/>

    <!-- For security reasons, let's disable some functions -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array" value="eval=>null,exec=>null,shell_exec=>null,system=>null,passthru=>null,popen=>null,stream_select=>null,create_function=>null,include=>require,include_once=>require_once" />
        </properties>
    </rule>

    <rule ref="Generic.Commenting">
        <!-- Don't break on todo items -->
        <exclude name="Generic.Commenting.Todo"/>
    </rule>

    <!-- PEAR checks are mostly because this standard is very strict in docblocks -->
    <rule ref="PEAR.Commenting">
        <!-- File comments are a bit useless, the class comments already describe what's happening -->
        <exclude name="PEAR.Commenting.FileComment"/>

        <!-- Class comments aren't required in this much detail -->
        <exclude name="PEAR.Commenting.ClassComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingAuthorTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLicenseTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLinkTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingPackageTag"/>
        <exclude name="PEAR.Commenting.ClassComment.EmptyDeprecatedTag"/>

        <!-- Function parameter comments don't be in this much detail -->
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamComment"/>
    </rule>

    <!-- PSR2 checks are used (and recommended) for usage with the Symfony framework, PSR1 is implied. -->
    <rule ref="PSR2"/>
</ruleset>
